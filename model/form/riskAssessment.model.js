const mongoose = require("mongoose"),
  Schema = mongoose.Schema;

const RiskAssessment = new Schema(
  {
    codeOfPract: Array,
    employee1: {
      type: mongoose.Types.ObjectId,
      ref: "User",
    },
    SDSRegister: Array,
    SWMSTab: Array,
    custConct: String,
    custConctPh: String,
    custEmail: String,
    customerName: String,
    date: String,
    dateTime: String,
    editor: String,
    expiryDate: String,
    file: Array,
    hazardous: Array,
    jobNumber: String,
    jurisdiction: String,
    location: String,
    persResp: Array,
    projectManager: String,
    projectManagerSWMS: String,
    qty: String,
    regulator: String,
    residualRisk: Array,
    riskLevel: Array,
    safetyLeg: String,
    siteName: String,
    statesSWMS: String,
    streetAddr: String,
    streetNo: String,
    suburb: String,
    town: String,
    signature1: String,
    jobTask: Array,
    riskConstruction: Array,
    PPEselection: Array,
    licence: Array,
    PPESelection2: Array,
    riskConstruction2: Array,
    identifyHazards: Array,
    jobTaskDataArr: Array,
    PPEselectionArr: Array,
    highRiskConstructionArr: Array,
    licenseAndQualificationArr: Array,
    projectMangArr: Array,
    allJobNumbersArr: Array,
    resiRiskLevelArr: Array,
    staffArr: Array,
    riskLevelArr: Array,
    allChemicalsArr: Array,
    allHazardsArr: Array,
    allContrlActReqArr: Array,
    regulatorDataArr: Array,
    safetyArr: Array,
    statesArr: Array,
    JurisdictionDataArr: Array,
    tradeCategoryArr: Array,
    postcode: String,
    employeeList: [
      {
        employeeId: {
          type: mongoose.Types.ObjectId,
          ref: "User",
        },
        signature2: String,
      },
    ],
    formId: {
      type: String,
    },
    refersTo: {
      type: mongoose.Types.ObjectId,
      ref: "Hazard",
    },
    updated: {
      type: String,
      default: "false",
    },
    version: {
      type: Number,
      default: 1,
    },
    createdTime: String,
    updatedTime: String,
    clientAdminId: {
      type: mongoose.Types.ObjectId,
      ref: "User",
    },
    userId: {
      type: mongoose.Types.ObjectId,
      ref: "User",
    },
    enable: {
      type: Boolean,
      default: true,
    },
    frequency: {
      type: String,
      enum: [
        "daily",
        "weekly",
        "quaterly",
        "monthly",
        "halfYearly",
        "yearly",
        "onceOff",
      ],
    },
    createdBy: { type: String },
    status: {
      type: String,
      default: "active",
    },
  },
  {
    timestamps: true,
  }
);
module.exports = mongoose.model("RiskAssessment", RiskAssessment);
